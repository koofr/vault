name: build

on: push

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Checkout
        uses: actions/checkout@v3
      - name: Expose GitHub Runtime
        uses: crazy-max/ghaction-github-runtime@v2
      - name: Build static files
        run: |
          GIT_REVISION=$(git rev-parse --short HEAD)
          docker buildx build --build-arg GIT_REVISION="$GIT_REVISION" --target ci-stage -t vault-ci --cache-from=type=gha --cache-to=type=gha,mode=max --load .
          docker run --rm vault-ci cat vault-web.tar.gz > vault-web.tar.gz
          sha256sum vault-web.tar.gz | awk '{print $1}' > vault-web.tar.gz.sha256
          docker run --rm vault-ci cat vault-wasm-nodejs.tar.gz > vault-wasm-nodejs.tar.gz
          docker run --rm vault-ci cat fake_remote > fake_remote
      - uses: actions/upload-artifact@v3
        with:
          name: vault-web
          path: vault-web.tar.gz*
          retention-days: 30
      - uses: actions/upload-artifact@v3
        with:
          name: vault-wasm-nodejs
          path: vault-wasm-nodejs.tar.gz*
          retention-days: 30
      - uses: actions/upload-artifact@v3
        with:
          name: vault-fake-remote
          path: fake_remote
          retention-days: 30

  cargo-test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: "cargo-registry-${{ hashFiles('**/Cargo.lock') }}"
      - uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: "cargo-index-${{ hashFiles('**/Cargo.lock') }}"
      - uses: actions/cache@v3
        with:
          path: target
          key: cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
      - name: Install rust
        uses: dtolnay/rust-toolchain@b44cb146d03e8d870c57ab64b80f04586349ca5d
        with:
          toolchain: "1.71.1"
      - name: Run cargo test
        run: cargo test -p vault-core

  playwright:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Install vault-web dependencies
        run: npm ci
        working-directory: vault-web
      - name: Install vault-web-tests dependencies
        run: npm ci
        working-directory: vault-web-tests
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps
        working-directory: vault-web-tests
      - uses: actions/download-artifact@v3
        with:
          name: vault-web
      - uses: actions/download-artifact@v3
        with:
          name: vault-wasm-nodejs
      - uses: actions/download-artifact@v3
        with:
          name: vault-fake-remote
      - name: Unpack vault-web into dist
        run: |
          mkdir dist
          cd dist
          tar xf ../../vault-web.tar.gz
        working-directory: vault-web
      - name: Unpack vault-wasm-nodejs into vault-web-tests
        run: |
          mkdir vault-wasm-nodejs
          cd vault-wasm-nodejs
          tar xf ../../vault-wasm-nodejs.tar.gz
        working-directory: vault-web-tests
      - name: Prepare fake remote
        run: |
          chmod +x fake_remote
      - name: Prepare credentials
        run: node scripts/generate-playwright-auth-user.js
        working-directory: vault-web-tests
      - name: Run eslint
        run: npm run eslint
        working-directory: vault-web-tests
      - name: Run tsc
        run: npm run tsc
        working-directory: vault-web-tests
      - name: Run Playwright tests
        run: |
          ../fake_remote &

          sleep 1

          scripts/use-fake-remote.sh ../vault-web/public/config.json
          scripts/use-fake-remote.sh ../vault-web/dist/config.json

          npx playwright test
        working-directory: vault-web-tests
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: vault-web-tests/playwright-report/
          retention-days: 30

  release:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs: [build, cargo-test, playwright]
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: vault-web
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            vault-web.tar.gz
            vault-web.tar.gz.sha256
          draft: true
          generate_release_notes: true
